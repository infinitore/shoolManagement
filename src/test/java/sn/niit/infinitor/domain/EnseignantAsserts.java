package sn.niit.infinitor.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EnseignantAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnseignantAllPropertiesEquals(Enseignant expected, Enseignant actual) {
        assertEnseignantAutoGeneratedPropertiesEquals(expected, actual);
        assertEnseignantAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnseignantAllUpdatablePropertiesEquals(Enseignant expected, Enseignant actual) {
        assertEnseignantUpdatableFieldsEquals(expected, actual);
        assertEnseignantUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnseignantAutoGeneratedPropertiesEquals(Enseignant expected, Enseignant actual) {
        assertThat(expected)
            .as("Verify Enseignant auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnseignantUpdatableFieldsEquals(Enseignant expected, Enseignant actual) {
        assertThat(expected)
            .as("Verify Enseignant relevant properties")
            .satisfies(e -> assertThat(e.getPrenom()).as("check prenom").isEqualTo(actual.getPrenom()))
            .satisfies(e -> assertThat(e.getNom()).as("check nom").isEqualTo(actual.getNom()))
            .satisfies(e -> assertThat(e.getDateEmbauche()).as("check dateEmbauche").isEqualTo(actual.getDateEmbauche()))
            .satisfies(e -> assertThat(e.getSpecialite()).as("check specialite").isEqualTo(actual.getSpecialite()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getTelephone()).as("check telephone").isEqualTo(actual.getTelephone()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnseignantUpdatableRelationshipsEquals(Enseignant expected, Enseignant actual) {}
}
